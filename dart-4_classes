void main(){
  var n = BigInt.from(50);
  print(n.gcd(BigInt.from(30)));
  
//   var user = User('motasem', email: 'motasem@gmai.com', age:22);
  //unordered optional 
  //but we must put variable name to distict the variable that assigned to value
  
  var u1 = User.name('motasem');
  //var u2 = User.age(22);
  
  var u2 = User(12, 'motassem', 'motasem@gmail.com', age:22);
  u2.setName = 'anwar';
  print(u2.getName);//get name
  
 
  
}

class User{
  
  //attributes
  //instance variables with null safety
  String? _name;
  int? _age = 2;
  String? _email;
  int? _id;
  
    //1) default empty constuctor
//   User(){}
//   User();
  
  
    //2) default parameterized constructor
  //all parameters are required in order
//   User(String name, int age){
//     this.name = name;
//     this.age = age;
//   }
  
  
    //3) default parameterized positional constructor
//   User(this.name, this.age);//directly
  //all parameters are required in order
  
  
  //4) default List constructor, mostly used in inheritance
//   User(String name, int age): name = name, age = age;
  //at the left is instance, at the right is local
  //all parameters are required in order
  
  
  //5) optional(can take initial value) [ordered] constructor
//    User(this.name, [this.age, this.email = '']);
  //age and email are optional
  //name is required
//   User('motasem', 22);
  //the order is necessary
  
  
  //6) optional(can take initial value) {un-ordered} constructor
//   User(this.name, {this.age, this.email});
  //var u1 = User('motasem', email: 'motasem@gmai.com');
  
  
  //7) named constructor
  User.name(this._name);
  User.age(this._age);
  //User.email({this._email = 'mo@gmail.com'});//error
  //private variablse cannot input in optional
  
  
  //private variablse cannot input in optional
  //User(this._id, this._name, this._email, {this._age})//error in _age
  
  //the right way is
  //must take (required keyword) or (initial value)
  //if it is required, must give it a value with calling
  //if it has initial value, can take a value or not
  User(this._id, this._name, this._email, {int age = 20}): _age = age;
  
  
  
  //setters and getters
  
  //void setName(String name){this._name = name;}
  set setName(String name) => this._name = name;
  
  //String getName(){return this._name;}
  String get getName => this._name ?? 'no name';//if we call it by class name 
}
